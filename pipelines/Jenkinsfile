pipeline {
  agent any
  environment {
    TF_IN_AUTOMATION = 'true'
    TF_INPUT = 'false'
    // If using AWS:
    // AWS_DEFAULT_REGION = 'ap-south-1'
    // INFRACOST_API_KEY is injected via withCredentials later
  }

  options {
    ansiColor('xterm')
    timestamps()
    disableConcurrentBuilds()
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'echo "Branch: $(git rev-parse --abbrev-ref HEAD)"'
      }
    }

    stage('Install Tools') {
      steps {
        sh '''
          set -e
          # Terraform
          if ! command -v terraform >/dev/null; then
            curl -fsSL https://releases.hashicorp.com/terraform/1.8.5/terraform_1.8.5_linux_amd64.zip -o tf.zip
            unzip -o tf.zip && sudo mv terraform /usr/local/bin/ && rm tf.zip
          fi
          terraform -version

          # TFLint
          if ! command -v tflint >/dev/null; then
            curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          fi
          tflint --version

          # tfsec
          if ! command -v tfsec >/dev/null; then
            curl -fsSL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          fi
          tfsec --version

          # Checkov
          if ! command -v checkov >/dev/null; then
            pipx >/dev/null 2>&1 || python3 -m pip install --user pipx && python3 -m pipx ensurepath
            ~/.local/bin/pipx install checkov
            export PATH=$PATH:~/.local/bin
          fi
          checkov -v

          # Conftest (OPA)
          if ! command -v conftest >/dev/null; then
            CONFT_VER="0.52.0"
            curl -fsSL -o conftest.tar.gz https://github.com/open-policy-agent/conftest/releases/download/v${CONFT_VER}/conftest_${CONFT_VER}_Linux_x86_64.tar.gz
            tar xzf conftest.tar.gz && sudo mv conftest /usr/local/bin/ && rm conftest.tar.gz
          fi
          conftest --version

          # terraform-docs
          if ! command -v terraform-docs >/dev/null; then
            DOCS_VER="0.17.0"
            curl -fsSL -o terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v${DOCS_VER}/terraform-docs-v${DOCS_VER}-linux-amd64.tar.gz
            tar xzf terraform-docs.tar.gz
            sudo mv terraform-docs /usr/local/bin/ && rm terraform-docs.tar.gz
          fi
          terraform-docs --version

          # Infracost (optional)
          if ! command -v infracost >/dev/null; then
            curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
            sudo mv ./bin/infracost /usr/local/bin/
          fi
          infracost --version
        '''
      }
    }

    stage('Initialize Terraform') {
      steps {
        dir('envs/dev') {
          sh '''
            set -e
            terraform init -upgrade
          '''
        }
      }
    }

    stage('Static Analysis (Parallel)') {
      parallel {
        stage('Fmt & Validate') {
          steps {
            dir('envs/dev') {
              sh '''
                set -e
                terraform fmt -check -recursive
                terraform validate
              '''
            }
          }
        }

        stage('TFLint') {
          steps {
            dir('envs/dev') {
              sh '''
                set -e
                tflint --recursive --format junit > ../tflint-report.xml || true
                # Exit non-zero if there are issues
                tflint --recursive
              '''
            }
          }
          post {
            always {
              junit allowEmptyResults: true, testResults: 'envs/tflint-report.xml'
            }
          }
        }

        stage('Security: tfsec') {
          steps {
            dir('envs/dev') {
              sh '''
                set -e
                # JUnit for Jenkins test view, SARIF for Warnings NG if you want
                tfsec . --format junit --out ../tfsec-report.xml || true
                tfsec . --format sarif --out ../tfsec.sarif || true
                # Fail build on findings (toggle if needed)
                tfsec .
              '''
            }
          }
          post {
            always {
              junit allowEmptyResults: true, testResults: 'envs/tfsec-report.xml'
              archiveArtifacts artifacts: 'envs/tfsec.sarif', onlyIfSuccessful: false
            }
          }
        }

        stage('Security: Checkov') {
          steps {
            dir('envs/dev') {
              sh '''
                set -e
                # JUnit XML
                checkov -d . --framework terraform --output junitxml > ../checkov-report.xml || true
                # Standard console fail (set --soft-fail in .checkov.yaml if you want warn-only)
                checkov -d . --framework terraform
              '''
            }
          }
          post {
            always {
              junit allowEmptyResults: true, testResults: 'envs/checkov-report.xml'
            }
          }
        }

        stage('Docs (terraform-docs)') {
          when { expression { return fileExists('.terraform-docs.yml') } }
          steps {
            sh '''
              set -e
              terraform-docs markdown table ./envs/dev > envs/dev/README.md
            '''
          }
          post {
            always {
              archiveArtifacts artifacts: 'envs/dev/README.md', onlyIfSuccessful: false
            }
          }
        }

        stage('Cost: Infracost') {
          steps {
            withCredentials([string(credentialsId: 'INFRACOST_API_KEY', variable: 'INFRACOST_API_KEY')]) {
              dir('envs/dev') {
                sh '''
                  set -e
                  infracost breakdown --path . \
                    --format json --out-file ../infracost.json
                  infracost output --path ../infracost.json --format table --show-skipped \
                    > ../infracost.txt
                '''
              }
            }
          }
          post {
            always {
              archiveArtifacts artifacts: 'envs/infracost.*', onlyIfSuccessful: false
            }
          }
        }
      }
    }

    stage('Policy (OPA/Conftest) on Plan') {
      steps {
        dir('envs/dev') {
          sh '''
            set -e
            terraform plan -out=tfplan.bin
            terraform show -json tfplan.bin > tfplan.json
            # Test plan JSON against Rego policies
            conftest test tfplan.json -p ../../policies/terraform
          '''
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'envs/dev/tfplan.*', onlyIfSuccessful: false
        }
      }
    }

    stage('Manual Gate: Proceed to Apply?') {
      when { branch 'main' }
      steps {
        script {
          // only proceed if all analysis stages passed
          input message: 'All checks passed. Apply to dev?'
        }
      }
    }

    stage('Terraform Apply (dev)') {
      when { branch 'main' }
      steps {
        dir('envs/dev') {
          sh '''
            set -e
            terraform apply -auto-approve tfplan.bin
          '''
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: '**/*.xml, **/*.sarif', onlyIfSuccessful: false
    }
    failure {
      echo 'Pipeline failed. Check stage logs and reports.'
    }
  }
}
